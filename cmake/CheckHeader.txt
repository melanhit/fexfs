INCLUDE(CheckIncludeFiles)

CHECK_INCLUDE_FILES(stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILES(error.h HAVE_ERROR_H)
CHECK_INCLUDE_FILES(err.h HAVE_ERR_H)
CHECK_INCLUDE_FILES(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILES(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILES(termios.h HAVE_TERMIOS_H)
CHECK_INCLUDE_FILES(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILES(getopt.h HAVE_GETOPT_H)

if(AKMOS_ENABLE_TEST)
    CHECK_INCLUDE_FILES(libgen.h HAVE_LIBGEN_H)
    CHECK_INCLUDE_FILES(ctype.h HAVE_CTYPE_H)
endif()

if(AKMOS_ENABLE_BENCH)
    CHECK_INCLUDE_FILES(time.h HAVE_TIME_H)
endif()

if(NOT HAVE_STDIO_H)
    unset(HAVE_STDIO_H)
    message(FATAL_ERROR "<stdio.h> is not found")
endif()

if(NOT HAVE_STDLIB_H)
    unset(HAVE_STDLIB_H)
    message(FATAL_ERROR "<stdlib.h> is not found")
endif()

if(NOT HAVE_STDINT_H)
    unset(HAVE_STDINT_H)
    message(FATAL_ERROR "<stdint.h> is not found")
endif()

if(NOT HAVE_STRING_H)
    unset(HAVE_STRING_H)
    message(FATAL_ERROR "<string.h> is not found")
endif()

if(NOT HAVE_STRINGS_H)
    unset(HAVE_STRING_H)
    message(FATAL_ERROR "<strings.h> is not found")
endif()

if(NOT HAVE_UNISTD_H)
    unset(HAVE_UNISTD_H)
    message(FATAL_ERROR "<unistd.h> is not found")
endif()

if(NOT HAVE_SYS_TYPES_H)
    unset(HAVE_SYS_TYPES_H)
    message(FATAL_ERROR "<sys/types.h> is not found")
endif()

if(NOT HAVE_SYS_STAT_H)
    unset(HAVE_SYS_STAT_H)
    message(FATAL_ERROR "<sys/stat.h> is not found")
endif()

if(NOT HAVE_FCNTL_H)
    unset(HAVE_FCNTL_H)
    message(FATAL_ERROR "<fcntl.h> is not found")
endif()

if(NOT HAVE_ERROR_H AND NOT HAVE_ERR_H)
    unset(HAVE_ERROR_H)
    unset(HAVE_ERR_H)
    message(FATAL_ERROR "<error.h> or <err.h> is not found")
endif()

if(NOT HAVE_ERRNO_H)
    unset(HAVE_ERRNO_H)
    message(FATAL_ERROR "<errno.h> is not found")
endif()

if(NOT HAVE_LIMITS_H)
    unset(HAVE_LIMITS_H)
    message(FATAL_ERROR "<limits.h> is not found")
endif()

if(NOT HAVE_TERMIOS_H)
    unset(HAVE_TERMIOS_H)
    message(FATAL_ERROR "<termios.h> is not found")
endif()

if(NOT HAVE_PTHREAD_H)
    unset(HAVE_PTHREAD_H)
    message(FATAL_ERROR "<pthread.h> is not found")
endif()

if(AKMOS_ENABLE_TEST)
    if(NOT HAVE_LIBGEN_H)
        unset(HAVE_LIBGEN_H)
        message(FATAL_ERROR "<libgen.h> is not found")
    endif()

    if(NOT HAVE_CTYPE_H)
        unset(HAVE_CTYPE_H)
        message(FATAL_ERROR "<ctype.h> is not found")
    endif()
endif()

if(AKMOS_ENABLE_BENCH)
    if(NOT HAVE_TIME_H)
        unset(HAVE_TIME_H)
        message(FATAL_ERROR "<time.h> is not found")
    endif()
endif()

# vim: syn=cmake
